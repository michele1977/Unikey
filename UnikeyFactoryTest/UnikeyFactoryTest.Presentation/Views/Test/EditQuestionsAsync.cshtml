@using UnikeyFactoryTest.Presentation.Models.DTO
@model UnikeyFactoryTest.Presentation.Models.DTO.QuestionDto

@{
    ViewBag.Title = "EditQuestionsAsync";
}

<h2>Edit Question</h2>

<div class="container">
    @using (Html.BeginForm("SaveUpdateQuestion", "Test", FormMethod.Post))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.Id)

            <div class="form-group">
                @Html.Label("Question Text", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10" style="text-align:center">
                    @Html.TextAreaFor(model => model.Text, new { @class = "required", style = "max-width: 100%;width: 100%; border-radius: 5px; border: 1px solid black;", @rows = 5 })
                    @Html.ValidationMessageFor(model => model.Text, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.Label("Question Score", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CorrectAnswerScore, new { @class = "form-control", type = "number" })
                    @Html.ValidationMessageFor(model => model.CorrectAnswerScore, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        for (int i = 0; i < Model.Answers.Count; i++)
        {
            <h3>Answer @i</h3>
            <div class="form-group">
                @Html.Label("Answer Text", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => Model.Answers[i].Text, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Text, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.Label("Check if it's the correct answer", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => Model.Answers[i].IsCorrectBool, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Text, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.Label("Answer Score", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => Model.Answers[i].Score, new { htmlAttributes = new { @class = "form-control", type = "number" } })
                    @Html.ValidationMessageFor(model => model.Text, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" class="btn-info" id="checkout" title="Save" />
            </div>
        </div>
    }
</div>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
