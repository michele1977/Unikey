@using UnikeyFactoryTest.Presentation.Models.DTO
@model UnikeyFactoryTest.Presentation.Models.DTO.TestDto


<style>
    #buttonCreate {
        margin-left: 83%;
        margin-top: 2px;
    }

    .class-mymarginleft {
        margin-left: 5px;
    }

    #class-textBox {
        max-width: 100%;
        width: 100%;
        margin-top: 5px;
    }

    #myDivContainerDown {
        margin-top: 10px;
    }

    .class-selected {
        border: 2px solid limegreen
    }
</style>

<script>
    function CorrectAnswer(id, idchk, idtxt) {
        var isChecked = document.getElementById(id).checked
        if (isChecked == true) {
            document.getElementById(idchk).classList.add("class-selected");
            document.getElementById(idtxt).hidden = false;
        }
        else {
            document.getElementById(idchk).classList.remove("class-selected");
            document.getElementById(idtxt).hidden = true;
        }
    }

    function EnableDiv(id) {
        document.getElementById(id).hidden = false;


    }

    //function DisabledButtonCreate(id, idbtn) {
    //    document.getElementById(id).removeAttribute("hidden");
    //    document.getElementById(idbtn).setAttribute("disabled");


    //}

    function DisableQuestionForm(id) {
        document.getElementById(id).hidden = true;
    }


</script>

@using (Html.BeginForm("AddTest", "Test", FormMethod.Post))
{
    @Html.HiddenFor(x => x.Id)
    <div class="col-lg-6 col-md-6 col-sm-6" id="myDivContainerTop">
        @Html.TextBoxFor(x => x.Title, new { @class = "form-control", id = "class-textBox", placeholder = "TestName" })
        @Html.TextBoxFor(x => x.Date, new { @class = "form-control", id = "class-textBox", placeholder = "Date", disabled = "disabled" })
        @if (Model.ShowForm)
        {
            <button class="btn btn-primary" id="buttonCreate"  disabled>Create</button>
        }
        @if (!Model.ShowForm)
        {
            <button class="btn btn-primary" id="buttonCreate">Create</button>
        }
    </div>
}

@if (Model != null)
{
    <div class="container" id="myDivContainerDown">
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-6" id="divList">
                <table class="table">
                        <tr>
                            <th>
                                QuestionText
                            </th>
                            <th>
                                <button class="btn btn-dark" onclick="EnableDiv('mydivQuestionForm')">+</button>
                            </th>
                        </tr>


                        @foreach (var Question in Model.Questions)
                        {
                            <tr>
                                <td>
                                    @Html.DisplayFor(modelItem => Question.Text)
                                </td>

                                <td>
                                    DELETE|DETAILS
                                    @*@Html.ActionLink("Delete", "DeleteQuestion", "Test", new { Id = Question.Id }, null) |
                                        @Html.ActionLink("Details", "Details", "Test", new { Id = Question.Id }, null) *@
                                </td>
                            </tr>
                        }


                    </table>
                

            </div>
            <div class="col-lg-6 col-md-6 col-sm-6" hidden id="mydivQuestionForm">
                @{
                    var myModel = new QuestionDto();
                    myModel.TestId = Model.Id;
                }
                @Html.Partial("AddQuestionPartial", myModel)
            </div>
        </div>
    </div>
}